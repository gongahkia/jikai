(A) Work out what LLMs (local/remote) I can use via api calls or direct prompting to generate reliable hypos and their respective issues and tags @core @function
(A) Ask GPT to suggest a learning plan and follow along with how to train my own model in prep for the intro-to-ai mod next sem, reference this channel (https://youtube.com/@statquest?si=TsXa6S6xCMznv0nH) as and where its relevant @core @ideas
(A) Take this opportunity to learn how to train a LLM model on specific hypo datasets from scratch, only using specified low-level core dependancies like langchain or those suited for law instead of using pretrained models @core @ideas
(A) Allow for students to generate practise hypos based on specified parameters @core @ideas
(A) Collate core subjects I want Jikai to support (tort law, criminal law, contract law 1, contract law 2, ip law) @core @ideas
(A) Brainstorm further user functionality that allows them to comment on hypos, rate hypos etc. @core @ideas
(A) Consider implementing more than one LLM so users can rate and jointly decide which LLMs are better at generating hypos @core @ideas
(A) Consider using https://github.com/explosion/spaCy to extract relevant information from the hypo for users, OR to implement an agentic workflow @core @ideas
(A) Implementing agentic workflows to test and randomly sample the generated hypos and issues being spotted to validate the quality of each hypo @core @testing
(A) Consider implementing a textbox or textarea for users to actually type their responses in so they can practise on the website itself @core @testing
(B) Look into launching the webapp with Jinja (https://jinja.palletsprojects.com/en/stable/) or another convenient to work with Python Web framework @web @feature
(B) Figure out what technologies I can use to migrate jikai to a full-stack webapp @web @feature
(B) Consider using flask or bottle (https://github.com/bottlepy/bottle) to handle the database interaction and backend routing logic @web @feature @backend
(C) Allow for students to log in with an account and store their respective hypos and cases on this account @web @feature @user
(D) Better code and all documentation to prepare jikai for release @admin 
(E) Backup plan: Always prioritise training my own models for hypo generation first, but if there's a limit to how well that goes then consider relying on OpenAI's API pricing per here (https://openai.com/api/pricing/) and see whether I can integrate Chatlab (https://github.com/rgbkrk/chatlab) so OpenAI can call my own predefined functions @ideas @future
(E) Additional: Look into bertopic (https://github.com/MaartenGr/BERTopic) and see whether there's a way to integrate it in a value-adding manner to jikai @ideas @future
(E) Additional: Look into f5-tts (https://github.com/SWivid/F5-TTS) and see whether there's a way to integrate it in a value-adding manner to jikai @ideas @future
(E) Additional: Look into bm25s (https://github.com/xhluca/bm25s) and see whether there's a way to integrate it in a value-adding manner to jikai @ideas @future